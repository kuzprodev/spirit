!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],T=C.document,i=Object.getPrototypeOf,a=t.slice,g=t.concat,l=t.push,r=t.indexOf,n={},o=n.toString,h=n.hasOwnProperty,s=h.toString,c=s.call(Object),v={};function m(e,t){var n=(t=t||T).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function u(e,t){return t.toUpperCase()}var d="3.2.0",E=function(e,t){return new E.fn.init(e,t)},f=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,y=/-([a-z])/g;function x(e){var t=!!e&&"length"in e&&e.length,n=E.type(e);return"function"!==n&&!E.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:d,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||E.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(o=r?(r=!1,n&&Array.isArray(n)?n:[]):n&&E.isPlainObject(n)?n:{},s[t]=E.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},E.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===E.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=i(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&s.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e},globalEval:function(e){m(e)},camelCase:function(e){return e.replace(p,"ms-").replace(y,u)},each:function(e,t){var n,i=0;if(x(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(f,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:r.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!=s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(x(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return g.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),E.isFunction(e))return i=a.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||E.guid++,r},now:Date.now,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var b=function(n){function d(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320)}function r(){S()}var e,p,b,o,s,h,f,g,w,l,c,S,C,a,T,v,u,m,y,E="sizzle"+1*new Date,x=n.document,k=0,i=0,A=se(),N=se(),D=se(),L=function(e,t){return e===t&&(c=!0),0},q={}.hasOwnProperty,t=[],j=t.pop,H=t.push,P=t.push,M=t.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",B="\\["+O+"*("+R+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+O+"*\\]",W=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",z=new RegExp(O+"+","g"),$=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),_=new RegExp("^"+O+"*,"+O+"*"),X=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),U=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),V=new RegExp(W),Y=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{P.apply(t=M.call(x.childNodes),x.childNodes),t[x.childNodes.length].nodeType}catch(e){P={apply:t.length?function(e,t){H.apply(e,M.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,n,i){var r,o,s,a,l,c,u,d=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:x)!==C&&S(t),t=t||C,T)){if(11!==f&&(l=K.exec(e)))if(r=l[1]){if(9===f){if(!(s=t.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&y(t,s)&&s.id===r)return n.push(s),n}else{if(l[2])return P.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return P.apply(n,t.getElementsByClassName(r)),n}if(p.qsa&&!D[e+" "]&&(!v||!v.test(e))){if(1!==f)d=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(ne,ie):t.setAttribute("id",a=E),o=(c=h(e)).length;o--;)c[o]="#"+a+" "+me(c[o]);u=c.join(","),d=ee.test(e)&&ge(t.parentNode)||t}if(u)try{return P.apply(n,d.querySelectorAll(u)),n}catch(e){}finally{a===E&&t.removeAttribute("id")}}}return g(e.replace($,"$1"),t,n,i)}function se(){var i=[];return function e(t,n){return i.push(t+" ")>b.cacheLength&&delete e[i.shift()],e[t+" "]=n}}function ae(e){return e[E]=!0,e}function le(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function pe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(s){return ae(function(o){return o=+o,ae(function(e,t){for(var n,i=s([],e.length,o),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=oe.support={},s=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},S=oe.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:x;return i!==C&&9===i.nodeType&&i.documentElement&&(a=(C=i).documentElement,T=!s(C),x!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",r,!1):n.attachEvent&&n.attachEvent("onunload",r)),p.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=le(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=Z.test(C.getElementsByClassName),p.getById=le(function(e){return a.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),p.getById?(b.filter.ID=function(e){var t=e.replace(te,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},u=[],v=[],(p.qsa=Z.test(C.querySelectorAll))&&(le(function(e){a.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+O+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+O+"*(?:value|"+F+")"),e.querySelectorAll("[id~="+E+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||v.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+O+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(p.matchesSelector=Z.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&le(function(e){p.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",W)}),v=v.length&&new RegExp(v.join("|")),u=u.length&&new RegExp(u.join("|")),t=Z.test(a.compareDocumentPosition),y=t||Z.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===x&&y(x,e)?-1:t===C||t.ownerDocument===x&&y(x,t)?1:l?I(l,e)-I(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===C?-1:t===C?1:r?-1:o?1:l?I(l,e)-I(l,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ue(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0}),C},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&S(e),t=t.replace(U,"='$1']"),p.matchesSelector&&T&&!D[t+" "]&&(!u||!u.test(t))&&(!v||!v.test(t)))try{var n=m.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<oe(t,C,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!==C&&S(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==C&&S(e);var n=b.attrHandle[t.toLowerCase()],i=n&&q.call(b.attrHandle,t.toLowerCase())?n(e,t,!T):void 0;return void 0!==i?i:p.attributes||!T?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(ne,ie)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,r=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(L),c){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},o=oe.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(b=oe.selectors={cacheLength:50,createPseudo:ae,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,d),e[3]=(e[3]||e[4]||e[5]||"").replace(te,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(e){var t=oe.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===r:"!="===i?t!==r:"^="===i?r&&0===t.indexOf(r):"*="===i?r&&-1<t.indexOf(r):"$="===i?r&&t.slice(-r.length)===r:"~="===i?-1<(" "+t.replace(z," ")+" ").indexOf(r):"|="===i&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var i,r,o,s,a,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=x&&e.nodeName.toLowerCase(),f=!n&&!x,p=!1;if(u){if(m){for(;c;){for(s=e;s=s[c];)if(x?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&f){for(p=(a=(i=(r=(o=(s=u)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(p=a=0)||l.pop();)if(1===s.nodeType&&++p&&s===e){r[h]=[k,a,p];break}}else if(f&&(p=a=(i=(r=(o=(s=e)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&i[1]),!1===p)for(;(s=++a&&s&&s[c]||(p=a=0)||l.pop())&&((x?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++p||(f&&((r=(o=s[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[k,p]),s!==e)););return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[E]?s(o):1<s.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,t){for(var n,i=s(e,o),r=i.length;r--;)e[n=I(e,i[r])]=!(t[n]=i[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ae(function(e){var i=[],r=[],a=f(e.replace($,"$1"));return a[E]?ae(function(e,t,n,i){for(var r,o=a(e,null,i,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,t,n){return i[0]=e,a(i,null,n,r),i[0]=null,!r.pop()}}),has:ae(function(t){return function(e){return 0<oe(t,e).length}}),contains:ae(function(t){return t=t.replace(te,d),function(e){return-1<(e.textContent||e.innerText||o(e)).indexOf(t)}}),lang:ae(function(n){return Y.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(te,d).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:n;0<=--i;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=fe(e);function ve(){}function me(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(a,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,f=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,n);return!1}:function(e,t,n){var i,r,o,s=[k,f];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(r=(o=e[E]||(e[E]={}))[e.uniqueID]||(o[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=r[u])&&i[0]===k&&i[1]===f)return s[2]=i[2];if((r[u]=s)[2]=a(e,t,n))return!0}return!1}}function xe(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function be(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function we(p,h,g,v,m,e){return v&&!v[E]&&(v=we(v)),m&&!m[E]&&(m=we(m,e)),ae(function(e,t,n,i){var r,o,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!p||!e&&h?u:be(u,a,p,n,i),f=g?m||(e?p:c||v)?[]:t:d;if(g&&g(d,f,n,i),v)for(r=be(f,l),v(r,[],n,i),o=r.length;o--;)(s=r[o])&&(f[l[o]]=!(d[l[o]]=s));if(e){if(m||p){if(m){for(r=[],o=f.length;o--;)(s=f[o])&&r.push(d[o]=s);m(null,f=[],r,i)}for(o=f.length;o--;)(s=f[o])&&-1<(r=m?I(e,s):a[o])&&(e[r]=!(t[r]=s))}}else f=be(f===t?f.splice(c,f.length):f),m?m(null,t,f,i):P.apply(t,f)})}function Se(e){for(var r,t,n,i=e.length,o=b.relative[e[0].type],s=o||b.relative[" "],a=o?1:0,l=ye(function(e){return e===r},s,!0),c=ye(function(e){return-1<I(r,e)},s,!0),u=[function(e,t,n){var i=!o&&(n||t!==w)||((r=t).nodeType?l(e,t,n):c(e,t,n));return r=null,i}];a<i;a++)if(t=b.relative[e[a].type])u=[ye(xe(u),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[E]){for(n=++a;n<i&&!b.relative[e[n].type];n++);return we(1<a&&xe(u),1<a&&me(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace($,"$1"),t,a<n&&Se(e.slice(a,n)),n<i&&Se(e=e.slice(n)),n<i&&me(e))}u.push(t)}return xe(u)}return ve.prototype=b.filters=b.pseudos,b.setFilters=new ve,h=oe.tokenize=function(e,t){var n,i,r,o,s,a,l,c=N[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(o in n&&!(i=_.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(r=[])),n=!1,(i=X.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace($," ")}),s=s.slice(n.length)),b.filter)!(i=G[o].exec(s))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):N(e,a).slice(0)},f=oe.compile=function(e,t){var n,i=[],r=[],o=D[e+" "];if(!o){for(n=(t=t||h(e)).length;n--;)(o=Se(t[n]))[E]?i.push(o):r.push(o);(o=D(e,function(v,m){function e(e,t,n,i,r){var o,s,a,l=0,c="0",u=e&&[],d=[],f=w,p=e||x&&b.find.TAG("*",r),h=k+=null==f?1:Math.random()||.1,g=p.length;for(r&&(w=t===C||t||r);c!==g&&null!=(o=p[c]);c++){if(x&&o){for(s=0,t||o.ownerDocument===C||(S(o),n=!T);a=v[s++];)if(a(o,t||C,n)){i.push(o);break}r&&(k=h)}y&&((o=!a&&o)&&l--,e&&u.push(o))}if(l+=c,y&&c!==l){for(s=0;a=m[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=j.call(i));d=be(d)}P.apply(i,d),r&&!e&&0<d.length&&1<l+m.length&&oe.uniqueSort(i)}return r&&(k=h,w=f),u}var y=0<m.length,x=0<v.length;return y?ae(e):e}(r,i))).selector=e}return o},g=oe.select=function(e,t,n,i){var r,o,s,a,l,c="function"==typeof e&&e,u=!i&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(o=u[0]=u[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&T&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(te,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=G.needsContext.test(e)?0:o.length;r--&&(s=o[r],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(te,d),ee.test(o[0].type)&&ge(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&me(o)))return P.apply(n,i),n;break}}return(c||f(e,u))(i,t,!T,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},p.sortStable=E.split("").sort(L).join("")===E,p.detectDuplicates=!!c,S(),p.sortDetached=le(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce(F,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(C);E.find=b,E.expr=b.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=b.uniqueSort,E.text=b.getText,E.isXMLDoc=b.isXML,E.contains=b.contains,E.escapeSelector=b.escape;function w(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i}function S(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var k=E.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function L(e,n,i){return E.isFunction(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?E.grep(e,function(e){return e===n!==i}):"string"!=typeof n?E.grep(e,function(e){return-1<r.call(n,e)!==i}):D.test(n)?E.filter(n,e,i):(n=E.filter(n,e),E.grep(e,function(e){return-1<r.call(n,e)!==i&&1===e.nodeType}))}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return 1<i?E.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var q,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||q,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):E.isFunction(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),N.test(i[1])&&E.isPlainObject(t))for(i in t)E.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=T.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=E.fn,q=E(T);var H=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&E(e);if(!k.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?r.call(E(e),this[0]):r.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return w(e,"parentNode")},parentsUntil:function(e,t,n){return w(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return w(e,"nextSibling")},prevAll:function(e){return w(e,"previousSibling")},nextUntil:function(e,t,n){return w(e,"nextSibling",n)},prevUntil:function(e,t,n){return w(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return A(e,"iframe")?e.contentDocument:(A(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(i,r){E.fn[i]=function(e,t){var n=E.map(this,r,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=E.filter(t,n)),1<this.length&&(P[i]||E.uniqueSort(n),H.test(i)&&n.reverse()),this.pushStack(n)}});var I=/[^\x20\t\r\n\f]+/g;function F(e){return e}function O(e){throw e}function R(e,t,n,i){var r;try{e&&E.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&E.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(i){i="string"==typeof i?function(e){var n={};return E.each(e.match(I)||[],function(e,t){n[t]=!0}),n}(i):E.extend({},i);function n(){for(o=o||i.once,t=r=!0;a.length;l=-1)for(e=a.shift();++l<s.length;)!1===s[l].apply(e[0],e[1])&&i.stopOnFalse&&(l=s.length,e=!1);i.memory||(e=!1),r=!1,o&&(s=e?[]:"")}var r,e,t,o,s=[],a=[],l=-1,c={add:function(){return s&&(e&&!r&&(l=s.length-1,a.push(e)),function n(e){E.each(e,function(e,t){E.isFunction(t)?i.unique&&c.has(t)||s.push(t):t&&t.length&&"string"!==E.type(t)&&n(t)})}(arguments),e&&!r&&n()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;-1<(n=E.inArray(t,s,n));)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s=s&&[],this},disable:function(){return o=a=[],s=e="",this},disabled:function(){return!s},lock:function(){return o=a=[],e||r||(s=e=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],a.push(t),r||n()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!t}};return c},E.extend({Deferred:function(e){var o=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var r=arguments;return E.Deferred(function(i){E.each(o,function(e,t){var n=E.isFunction(r[t[4]])&&r[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&E.isFunction(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function c(r,o,s,a){return function(){function e(){var e,t;if(!(r<l)){if((e=s.apply(n,i))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,E.isFunction(t)?a?t.call(e,c(l,o,F,a),c(l,o,O,a)):(l++,t.call(e,c(l,o,F,a),c(l,o,O,a),c(l,o,F,o.notifyWith))):(s!==F&&(n=void 0,i=[e]),(a||o.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(s!==O&&(n=void 0,i=[e]),o.rejectWith(n,i))}};r?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),C.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(c(0,e,E.isFunction(i)?i:F,e.notifyWith)),o[1][3].add(c(0,e,E.isFunction(t)?t:F)),o[2][3].add(c(0,e,E.isFunction(n)?n:O))}).promise()},promise:function(e){return null!=e?E.extend(e,s):s}},a={};return E.each(o,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){r=i},o[3-e][2].disable,o[0][2].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){r[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(r,o)}}var n=arguments.length,i=n,r=Array(i),o=a.call(arguments),s=E.Deferred();if(n<=1&&(R(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||E.isFunction(o[i]&&o[i].then)))return s.then();for(;i--;)R(o[i],t(i),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&B.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){C.setTimeout(function(){throw e})};var W=E.Deferred();function z(){T.removeEventListener("DOMContentLoaded",z),C.removeEventListener("load",z),E.ready()}E.fn.ready=function(e){return W.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(T,[E])}}),E.ready.then=W.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?C.setTimeout(E.ready):(T.addEventListener("DOMContentLoaded",z),C.addEventListener("load",z));function $(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}var _=function(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===E.type(n))for(a in r=!0,n)_(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,E.isFunction(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(E(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o};function X(){this.expando=E.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[E.camelCase(t)]=n;else for(i in t)r[E.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][E.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(E.camelCase):(t=E.camelCase(t))in i?[t]:t.match(I)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!E.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var U=new X,V=new X,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,G=/[A-Z]/g;function Q(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(G,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Y.test(e)?JSON.parse(e):e)}(n)}catch(e){}V.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return V.hasData(e)||U.hasData(e)},data:function(e,t,n){return V.access(e,t,n)},removeData:function(e,t){V.remove(e,t)},_data:function(e,t,n){return U.access(e,t,n)},_removeData:function(e,t){U.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,i,r,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){V.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=V.get(o,n))?t:void 0!==(t=Q(o,n))?t:void 0;this.each(function(){V.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=V.get(o),1===o.nodeType&&!U.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=E.camelCase(i.slice(5)),Q(o,i,r[i]));U.set(o,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){V.remove(this,e)})}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=U.get(e,t),n&&(!i||Array.isArray(n)?i=U.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),o=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){E.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return U.get(e,n)||U.access(e,n,{empty:E.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||o.resolveWith(s,[s])}var i,r=1,o=E.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=U.get(s[a],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),o.promise(t)}});function J(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r}var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,K=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),ee=["Top","Right","Bottom","Left"],te=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&E.contains(e.ownerDocument,e)&&"none"===E.css(e,"display")};function ne(e,t,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=a(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=(E.cssNumber[t]||"px"!==c&&+l)&&K.exec(E.css(e,t));if(u&&u[3]!==c)for(c=c||u[3],n=n||[],u=+l||1;u/=o=o||".5",E.style(e,t,u+c),o!==(o=a()/l)&&1!==o&&--s;);return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ie={};function re(e,t){for(var n,i,r,o,s,a,l,c=[],u=0,d=e.length;u<d;u++)(i=e[u]).style&&(n=i.style.display,t?("none"===n&&(c[u]=U.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&te(i)&&(c[u]=(l=s=o=void 0,s=(r=i).ownerDocument,a=r.nodeName,(l=ie[a])||(o=s.body.appendChild(s.createElement(a)),l=E.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ie[a]=l)))):"none"!==n&&(c[u]="none",U.set(i,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}E.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){te(this)?E(this).show():E(this).hide()})}});var oe=/^(?:checkbox|radio)$/i,se=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ae=/^$|\/(?:java|ecma)script/i,le={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ce(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?E.merge([e],n):n}function ue(e,t){for(var n=0,i=e.length;n<i;n++)U.set(e[n],"globalEval",!t||U.get(t[n],"globalEval"))}le.optgroup=le.option,le.tbody=le.tfoot=le.colgroup=le.caption=le.thead,le.th=le.td;var de,fe,pe=/<|&#?\w+;/;function he(e,t,n,i,r){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===E.type(o))E.merge(f,o.nodeType?[o]:o);else if(pe.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(se.exec(o)||["",""])[1].toLowerCase(),l=le[a]||le._default,s.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;E.merge(f,s.childNodes),(s=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&-1<E.inArray(o,i))r&&r.push(o);else if(c=E.contains(o.ownerDocument,o),s=ce(d.appendChild(o),"script"),c&&ue(s),n)for(u=0;o=s[u++];)ae.test(o.type||"")&&n.push(o);return d}de=T.createDocumentFragment().appendChild(T.createElement("div")),(fe=T.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),de.appendChild(fe),v.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue;var ge=T.documentElement,ve=/^key/,me=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ye=/^([^.]*)(?:\.(.+)|)/;function xe(){return!0}function be(){return!1}function we(){try{return T.activeElement}catch(e){}}function Se(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Se(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=be;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return E().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),e.each(function(){E.event.add(this,t,r,i,n)})}E.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,d,f,p,h,g,v=U.get(t);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(ge,r),n.guid||(n.guid=E.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(I)||[""]).length;c--;)p=g=(a=ye.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),p&&(d=E.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=E.event.special[p]||{},u=E.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(p,s)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),E.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,d,f,p,h,g,v=U.hasData(e)&&U.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(I)||[""]).length;c--;)if(p=g=(a=ye.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),p){for(d=E.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[c],n,i,!0);E.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=E.event.fix(e),l=new Array(arguments.length),c=(U.get(this,"events")||{})[a.type]||[],u=E.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=E.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?-1<E(r,this).index(c):E.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:E.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==we()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===we()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(oe.test(this.type)&&this.click&&A(this,"input"))return this.click(),!1},_default:function(e){return A(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:be,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||E.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:be,isPropagationStopped:be,isImmediatePropagationStopped:be,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ve.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&me.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){E.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),E.fn.extend({on:function(e,t,n,i){return Se(this,e,t,n,i)},one:function(e,t,n,i){return Se(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=be),this.each(function(){E.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this}});var Ce=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Te=/<script|<style|<link/i,Ee=/checked\s*(?:[^=]|=\s*.checked.)/i,ke=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&E(">tbody",e)[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){var t=ke.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function qe(e,t){var n,i,r,o,s,a,l,c;if(1===t.nodeType){if(U.hasData(e)&&(o=U.access(e),s=U.set(t,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)E.event.add(t,r,c[r][n]);V.hasData(e)&&(a=V.access(e),l=E.extend({},a),V.set(t,l))}}function je(n,i,r,o){i=g.apply([],i);var e,t,s,a,l,c,u=0,d=n.length,f=d-1,p=i[0],h=E.isFunction(p);if(h||1<d&&"string"==typeof p&&!v.checkClone&&Ee.test(p))return n.each(function(e){var t=n.eq(e);h&&(i[0]=p.call(this,e,t.html())),je(t,i,r,o)});if(d&&(t=(e=he(i,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=E.map(ce(e,"script"),De)).length;u<d;u++)l=e,u!==f&&(l=E.clone(l,!0,!0),a&&E.merge(s,ce(l,"script"))),r.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,E.map(s,Le),u=0;u<a;u++)l=s[u],ae.test(l.type||"")&&!U.access(l,"globalEval")&&E.contains(c,l)&&(l.src?E._evalUrl&&E._evalUrl(l.src):m(l.textContent.replace(Ae,""),c))}return n}function He(e,t,n){for(var i,r=t?E.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(ce(i)),i.parentNode&&(n&&E.contains(i.ownerDocument,i)&&ue(ce(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e.replace(Ce,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,l,c,u=e.cloneNode(!0),d=E.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=ce(u),i=0,r=(o=ce(e)).length;i<r;i++)a=o[i],l=s[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&oe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||ce(e),s=s||ce(u),i=0,r=o.length;i<r;i++)qe(o[i],s[i]);else qe(e,u);return 0<(s=ce(u,"script")).length&&ue(s,!d&&ce(e,"script")),u},cleanData:function(e){for(var t,n,i,r=E.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[U.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[U.expando]=void 0}n[V.expando]&&(n[V.expando]=void 0)}}}),E.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return _(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)})},prepend:function(){return je(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ce(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Te.test(e)&&!le[(se.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ce(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return je(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ce(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){E.fn[e]=function(e){for(var t,n=[],i=E(e),r=i.length-1,o=0;o<=r;o++)t=o===r?this:this.clone(!0),E(i[o])[s](t),l.apply(n,t.get());return this.pushStack(n)}});var Pe,Me,Ie,Fe,Oe,Re,Be=/^margin/,We=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)};function $e(){if(Re){Re.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",Re.innerHTML="",ge.appendChild(Oe);var e=C.getComputedStyle(Re);Pe="1%"!==e.top,Fe="2px"===e.marginLeft,Me="4px"===e.width,Re.style.marginRight="50%",Ie="4px"===e.marginRight,ge.removeChild(Oe),Re=null}}function _e(e,t,n){var i,r,o,s,a=e.style;return(n=n||ze(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||E.contains(e.ownerDocument,e)||(s=E.style(e,t)),!v.pixelMarginRight()&&We.test(s)&&Be.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Xe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Oe=T.createElement("div"),(Re=T.createElement("div")).style&&(Re.style.backgroundClip="content-box",Re.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Re.style.backgroundClip,Oe.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",Oe.appendChild(Re),E.extend(v,{pixelPosition:function(){return $e(),Pe},boxSizingReliable:function(){return $e(),Me},pixelMarginRight:function(){return $e(),Ie},reliableMarginLeft:function(){return $e(),Fe}}));var Ue=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Qe=["Webkit","Moz","ms"],Je=T.createElement("div").style;function Ze(e){var t=E.cssProps[e];return t=t||(E.cssProps[e]=function(e){if(e in Je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;n--;)if((e=Qe[n]+t)in Je)return e}(e)||e)}function Ke(e,t,n){var i=K.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function et(e,t,n,i,r){var o,s=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=E.css(e,n+ee[o],!0,r)),i?("content"===n&&(s-=E.css(e,"padding"+ee[o],!0,r)),"margin"!==n&&(s-=E.css(e,"border"+ee[o]+"Width",!0,r))):(s+=E.css(e,"padding"+ee[o],!0,r),"padding"!==n&&(s+=E.css(e,"border"+ee[o]+"Width",!0,r)));return s}function tt(e,t,n){var i,r=ze(e),o=_e(e,t,r),s="border-box"===E.css(e,"boxSizing",!1,r);return We.test(o)?o:(i=s&&(v.boxSizingReliable()||o===e.style[t]),(o=parseFloat(o)||0)+et(e,t,n||(s?"border":"content"),i,r)+"px")}function nt(e,t,n,i,r){return new nt.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=E.camelCase(t),l=Ve.test(t),c=e.style;if(l||(t=Ze(a)),s=E.cssHooks[t]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=K.exec(n))&&r[1]&&(n=ne(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=E.camelCase(t);return Ve.test(t)||(t=Ze(a)),(s=E.cssHooks[t]||E.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=_e(e,t,i)),"normal"===r&&t in Ge&&(r=Ge[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],function(e,s){E.cssHooks[s]={get:function(e,t,n){if(t)return!Ue.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,s,n):J(e,Ye,function(){return tt(e,s,n)})},set:function(e,t,n){var i,r=n&&ze(e),o=n&&et(e,s,n,"border-box"===E.css(e,"boxSizing",!1,r),r);return o&&(i=K.exec(t))&&"px"!==(i[3]||"px")&&(e.style[s]=t,t=E.css(e,s)),Ke(0,t,o)}}}),E.cssHooks.marginLeft=Xe(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-J(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(r,o){E.cssHooks[r+o]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+ee[t]+o]=i[t]||i[t-2]||i[0];return n}},Be.test(r)||(E.cssHooks[r+o].set=Ke)}),E.fn.extend({css:function(e,t){return _(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=ze(e),r=t.length;s<r;s++)o[t[s]]=E.css(e,t[s],!1,i);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),((E.Tween=nt).prototype={constructor:nt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[E.cssProps[e.prop]]&&!E.cssHooks[e.prop]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=nt.prototype.init,E.fx.step={};var it,rt,ot,st,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){rt&&(!1===T.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(ct):C.setTimeout(ct,E.fx.interval),E.fx.tick())}function ut(){return C.setTimeout(function(){it=void 0}),it=E.now()}function dt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=ee[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function pt(o,e,t){var n,s,i=0,r=pt.prefilters.length,a=E.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=it||ut(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,r=c.tweens.length;i<r;i++)c.tweens[i].run(n);return a.notifyWith(o,[c,n,t]),n<1&&r?t:(r||a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c]),!1)},c=a.promise({elem:o,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:it||ut(),duration:t.duration,tweens:[],createTween:function(e,t){var n=E.Tween(o,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c,e])):a.rejectWith(o,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=E.camelCase(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=E.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);i<r;i++)if(n=pt.prefilters[i].call(c,o,u,c.opts))return E.isFunction(n.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=E.proxy(n.stop,n)),n;return E.map(u,ft,c),E.isFunction(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ne(n.elem,e,K.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=E.isFunction(e)?(t=e,["*"]):e.match(I)).length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&te(e),v=U.get(e,"fxshow");for(i in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],at.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}p[i]=v&&v[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=U.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(re([e],!0),c=e.style.display||c,u=E.css(e,"display"),re([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,p)l||(v?"hidden"in v&&(g=v.hidden):v=U.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&re([e],!0),f.done(function(){for(i in g||re([e]),U.remove(e,"fxshow"),p)E.style(e,i,p[i])})),l=ft(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||E.isFunction(e)&&e,duration:e,easing:n&&t||t&&!E.isFunction(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){E.isFunction(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(te).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=pt(this,E.extend({},t),s);(o||U.get(this,"finish"))&&e.stop(!0)}var o=E.isEmptyObject(t),s=E.speed(e,n,i);return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(r,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=E.timers,i=U.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&lt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||E.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=U.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],r=E.timers,o=n?n.length:0;for(t.finish=!0,E.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,i){var r=E.fn[i];E.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(dt(i,!0),e,t,n)}}),E.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){E.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(it=E.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),it=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){rt||(rt=!0,ct())},E.fx.stop=function(){rt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(i,e){return i=E.fx&&E.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,i);t.stop=function(){C.clearTimeout(n)}})},ot=T.createElement("input"),st=T.createElement("select").appendChild(T.createElement("option")),ot.type="checkbox",v.checkOn=""!==ot.value,v.optSelected=st.selected,(ot=T.createElement("input")).value="t",ot.type="radio",v.radioValue="t"===ot.value;var ht,gt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return _(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(I);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var s=gt[t]||E.find.attr;gt[t]=function(e,t,n){var i,r,o=t.toLowerCase();return n||(r=gt[o],gt[o]=i,i=null!=s(e,t,n)?o:null,gt[o]=r),i}});var vt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function yt(e){return(e.match(I)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}E.fn.extend({prop:function(e,t){return _(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(E.isFunction(t))return this.each(function(e){E(this).addClass(t.call(this,e,xt(this)))});if("string"==typeof t&&t)for(e=t.match(I)||[];n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=yt(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(E.isFunction(t))return this.each(function(e){E(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(I)||[];n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(s=0;o=e[s++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(a=yt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(r,t){var o=typeof r;return"boolean"==typeof t&&"string"==o?t?this.addClass(r):this.removeClass(r):E.isFunction(r)?this.each(function(e){E(this).toggleClass(r.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,i;if("string"==o)for(t=0,n=E(this),i=r.match(I)||[];e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==r&&"boolean"!=o||((e=xt(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===r?"":U.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+yt(xt(n))+" ").indexOf(t))return!0;return!1}});var bt=/\r/g;E.fn.extend({val:function(n){var i,e,r,t=this[0];return arguments.length?(r=E.isFunction(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?n.call(this,e,E(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(i=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(bt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:yt(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=E.makeArray(t),s=r.length;s--;)((i=r[s]).selected=-1<E.inArray(E.valHooks.option.get(i),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,n,i){var r,o,s,a,l,c,u,d=[n||T],f=h.call(e,"type")?e.type:e,p=h.call(e,"namespace")?e.namespace.split("."):[];if(o=s=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!wt.test(f+E.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[E.expando]?e:new E.Event(f,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),u=E.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!E.isWindow(n)){for(a=u.delegateType||f,wt.test(a+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),s=o;s===(n.ownerDocument||T)&&d.push(s.defaultView||s.parentWindow||C)}for(r=0;(o=d[r++])&&!e.isPropagationStopped();)e.type=1<r?a:u.bindType||f,(c=(U.get(o,"events")||{})[e.type]&&U.get(o,"handle"))&&c.apply(o,t),(c=l&&o[l])&&c.apply&&$(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=f,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!$(n)||l&&E.isFunction(n[f])&&!E.isWindow(n)&&((s=n[l])&&(n[l]=null),n[E.event.triggered=f](),E.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.focusin="onfocusin"in C,v.focusin||E.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){E.event.simulate(i,e.target,E.event.fix(e))}E.event.special[i]={setup:function(){var e=this.ownerDocument||this,t=U.access(e,i);t||e.addEventListener(n,r,!0),U.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=U.access(e,i)-1;t?U.access(e,i,t):(e.removeEventListener(n,r,!0),U.remove(e,i))}}});var St=C.location,Ct=E.now(),Tt=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Et=/\[\]$/,kt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Dt(n,e,i,r){var t;if(Array.isArray(e))E.each(e,function(e,t){i||Et.test(n)?r(n,t):Dt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,r)});else if(i||"object"!==E.type(e))r(n,e);else for(t in e)Dt(n+"["+t+"]",e[t],i,r)}E.param=function(e,t){function n(e,t){var n=E.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,r=[];if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){n(this.name,this.value)});else for(i in e)Dt(i,e[i],t,n);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!oe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Lt=/%20/g,qt=/#.*$/,jt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Ft={},Ot="*/".concat("*"),Rt=T.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(I)||[];if(E.isFunction(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Wt(t,r,o,s){var a={},l=t===Ft;function c(e){var i;return a[e]=!0,E.each(t[e]||[],function(e,t){var n=t(r,o,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),c(n),!1)}),i}return c(r.dataTypes[0])||!a["*"]&&c("*")}function zt(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&E.extend(!0,e,i),e}Rt.href=St.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,E.ajaxSettings),t):zt(E.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,f,n,p,i,h,g,r,o,v=E.ajaxSetup({},t),m=v.context||v,y=v.context&&(m.nodeType||m.jquery)?E(m):E.event,x=E.Deferred(),b=E.Callbacks("once memory"),w=v.statusCode||{},s={},a={},l="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Ht.exec(f);)n[t[1].toLowerCase()]=t[2];t=n[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return h?f:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(x.promise(S),v.url=((e||v.url||St.href)+"").replace(Mt,St.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(I)||[""],null==v.crossDomain){i=T.createElement("a");try{i.href=v.url,i.href=i.href,v.crossDomain=Rt.protocol+"//"+Rt.host!=i.protocol+"//"+i.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=E.param(v.data,v.traditional)),Wt(It,v,t,S),h)return S;for(r in(g=E.event&&v.global)&&0==E.active++&&E.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Pt.test(v.type),d=v.url.replace(qt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(d.length),v.data&&(d+=(Tt.test(d)?"&":"?")+v.data,delete v.data),!1===v.cache&&(d=d.replace(jt,"$1"),o=(Tt.test(d)?"&":"?")+"_="+Ct+++o),v.url=d+o),v.ifModified&&(E.lastModified[d]&&S.setRequestHeader("If-Modified-Since",E.lastModified[d]),E.etag[d]&&S.setRequestHeader("If-None-Match",E.etag[d])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&S.setRequestHeader("Content-Type",v.contentType),S.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Ot+"; q=0.01":""):v.accepts["*"]),v.headers)S.setRequestHeader(r,v.headers[r]);if(v.beforeSend&&(!1===v.beforeSend.call(m,S,v)||h))return S.abort();if(l="abort",b.add(v.complete),S.done(v.success),S.fail(v.error),u=Wt(Ft,v,t,S)){if(S.readyState=1,g&&y.trigger("ajaxSend",[S,v]),h)return S;v.async&&0<v.timeout&&(p=C.setTimeout(function(){S.abort("timeout")},v.timeout));try{h=!1,u.send(s,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,i){var r,o,s,a,l,c=t;h||(h=!0,p&&C.clearTimeout(p),u=void 0,f=i||"",S.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s=s||r}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(v,S,n)),a=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(v,a,S,r),r?(v.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(E.lastModified[d]=l),(l=S.getResponseHeader("etag"))&&(E.etag[d]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=a.state,o=a.data,r=!(s=a.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),S.status=e,S.statusText=(t||c)+"",r?x.resolveWith(m,[o,c,S]):x.rejectWith(m,[S,c,s]),S.statusCode(w),w=void 0,g&&y.trigger(r?"ajaxSuccess":"ajaxError",[S,v,r?o:s]),b.fireWith(m,[S,c]),g&&(y.trigger("ajaxComplete",[S,v]),--E.active||E.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,r){E[r]=function(e,t,n,i){return E.isFunction(t)&&(i=i||n,n=t,t=void 0),E.ajax(E.extend({url:e,type:r,dataType:i,data:t,success:n},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(E.isFunction(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return E.isFunction(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=E.isFunction(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},_t=E.ajaxSettings.xhr();v.cors=!!_t&&"withCredentials"in _t,v.ajax=_t=!!_t,E.ajaxTransport(function(r){var o,s;if(v.cors||_t&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=i.onload=i.onerror=i.onabort=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t($t[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=o(),s=i.onerror=o("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){o&&s()})},o=o("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(n){var i,r;if(n.crossDomain)return{send:function(e,t){i=E("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(i[0])},abort:function(){r&&r()}}});var Xt,Ut=[],Vt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||E.expando+"_"+Ct++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,o,s=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=E.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Vt,"$1"+i):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||E.error(i+" was not called"),o[0]},e.dataTypes[0]="json",r=C[i],C[i]=function(){o=arguments},n.always(function(){void 0===r?E(C).removeProp(i):C[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(i)),o&&E.isFunction(r)&&r(o[0]),o=r=void 0}),"script"}),v.createHTMLDocument=((Xt=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(i)):t=T),o=!n&&[],(r=N.exec(e))?[t.createElement(r[1])]:(r=he([e],t,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return-1<a&&(i=yt(e.slice(a)),e=e.slice(0,a)),E.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<s.length&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=E.css(e,"position"),u=E(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=E.css(e,"top"),l=E.css(e,"left"),r=("absolute"===c||"fixed"===c)&&-1<(o+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(o)||0,parseFloat(l)||0),E.isFunction(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):u.css(d)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,i,r,o=this[0];return o?o.getClientRects().length?(i=o.getBoundingClientRect(),n=(e=o.ownerDocument).documentElement,r=e.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===E.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),A(e[0],"html")||(i=e.offset()),i={top:i.top+E.css(e[0],"borderTopWidth",!0),left:i.left+E.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-E.css(n,"marginTop",!0),left:t.left-i.left-E.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ge})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o="pageYOffset"===r;E.fn[t]=function(e){return _(this,function(e,t,n){var i;if(E.isWindow(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[r]:e[t];i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each(["top","left"],function(e,n){E.cssHooks[n]=Xe(v.pixelPosition,function(e,t){if(t)return t=_e(e,n),We.test(t)?E(e).position()[n]+"px":t})}),E.each({Height:"height",Width:"width"},function(s,a){E.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,o){E.fn[o]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var i;return E.isWindow(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?E.css(e,t,r):E.style(e,t,n,r)},a,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},holdReady:function(e){e?E.readyWait++:E.ready(!0)}}),E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var Yt=C.jQuery,Gt=C.$;return E.noConflict=function(e){return C.$===E&&(C.$=Gt),e&&C.jQuery===E&&(C.jQuery=Yt),E},e||(C.jQuery=C.$=E),E}),function($){var _={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0}};$.fn.bxSlider=function(t){if(0===this.length)return this;if(1<this.length)return this.each(function(){$(this).bxSlider(t)}),this;var u={},d=this,r=$(window).width(),o=$(window).height();if(!$(d).data("bxSlider")){function n(){$(d).data("bxSlider")||(u.settings=$.extend({},_,t),u.settings.slideWidth=parseInt(u.settings.slideWidth),u.children=d.children(u.settings.slideSelector),u.children.length<u.settings.minSlides&&(u.settings.minSlides=u.children.length),u.children.length<u.settings.maxSlides&&(u.settings.maxSlides=u.children.length),u.settings.randomStart&&(u.settings.startSlide=Math.floor(Math.random()*u.children.length)),u.active={index:u.settings.startSlide},u.carousel=1<u.settings.minSlides||1<u.settings.maxSlides,u.carousel&&(u.settings.preloadImages="all"),u.minThreshold=u.settings.minSlides*u.settings.slideWidth+(u.settings.minSlides-1)*u.settings.slideMargin,u.maxThreshold=u.settings.maxSlides*u.settings.slideWidth+(u.settings.maxSlides-1)*u.settings.slideMargin,u.working=!1,u.controls={},u.interval=null,u.animProp="vertical"===u.settings.mode?"top":"left",u.usingCSS=u.settings.useCSS&&"fade"!==u.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return u.cssPrefix=t[n].replace("Perspective","").toLowerCase(),u.animProp="-"+u.cssPrefix+"-transform",!0;return!1}(),"vertical"===u.settings.mode&&(u.settings.maxSlides=u.settings.minSlides),d.data("origStyle",d.attr("style")),d.children(u.settings.slideSelector).each(function(){$(this).data("origStyle",$(this).attr("style"))}),a())}function s(){var e=1,t=null;return"horizontal"===u.settings.mode&&0<u.settings.slideWidth?e=u.viewport.width()<u.minThreshold?u.settings.minSlides:u.viewport.width()>u.maxThreshold?u.settings.maxSlides:(t=u.children.first().width()+u.settings.slideMargin,Math.floor((u.viewport.width()+u.settings.slideMargin)/t)):"vertical"===u.settings.mode&&(e=u.settings.minSlides),e}function e(){for(var e="",t="",n=v(),i=0;i<n;i++)t="",u.settings.buildPager&&$.isFunction(u.settings.buildPager)||u.settings.pagerCustom?(t=u.settings.buildPager(i),u.pagerEl.addClass("bx-custom-pager")):(t=i+1,u.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+t+"</a></div>";u.pagerEl.html(e)}function f(e){var t=s();u.settings.ariaHidden&&!u.settings.ticker&&(u.children.attr("aria-hidden","true"),u.children.slice(e,e+t).attr("aria-hidden","false"))}var a=function(){var e=u.children.eq(u.settings.startSlide);d.wrap('<div class="'+u.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),u.viewport=d.parent(),u.settings.ariaLive&&!u.settings.ticker&&u.viewport.attr("aria-live","polite"),u.loader=$('<div class="bx-loading" />'),u.viewport.prepend(u.loader),d.css({width:"horizontal"===u.settings.mode?1e3*u.children.length+215+"%":"auto",position:"relative"}),u.usingCSS&&u.settings.easing?d.css("-"+u.cssPrefix+"-transition-timing-function",u.settings.easing):u.settings.easing||(u.settings.easing="swing"),u.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),u.viewport.parent().css({maxWidth:h()}),u.children.css({float:"horizontal"===u.settings.mode?"left":"none",listStyle:"none",position:"relative"}),u.children.css("width",g()),"horizontal"===u.settings.mode&&0<u.settings.slideMargin&&u.children.css("marginRight",u.settings.slideMargin),"vertical"===u.settings.mode&&0<u.settings.slideMargin&&u.children.css("marginBottom",u.settings.slideMargin),"fade"===u.settings.mode&&(u.children.css({position:"absolute",zIndex:0,display:"none"}),u.children.eq(u.settings.startSlide).css({zIndex:u.settings.slideZIndex,display:"block"})),u.controls.el=$('<div class="bx-controls" />'),u.settings.captions&&C(),u.active.last=u.settings.startSlide===v()-1,u.settings.video&&d.fitVids(),"all"!==u.settings.preloadImages&&!u.settings.ticker||(e=u.children),u.settings.ticker?u.settings.pager=!1:(u.settings.controls&&w(),u.settings.auto&&u.settings.autoControls&&S(),u.settings.pager&&b(),(u.settings.controls||u.settings.autoControls||u.settings.pager)&&u.viewport.after(u.controls.el)),l(e,c)},l=function(e,t){var n=e.find('img:not([src=""]), iframe').length,i=0;0!==n?e.find('img:not([src=""]), iframe').each(function(){$(this).one("load error",function(){++i===n&&t()}).each(function(){this.complete&&$(this).trigger("load")})}):t()},c=function(){if(u.settings.infiniteLoop&&"fade"!==u.settings.mode&&!u.settings.ticker){var e="vertical"===u.settings.mode?u.settings.minSlides:u.settings.maxSlides,t=u.children.slice(0,e).clone(!0).addClass("bx-clone"),n=u.children.slice(-e).clone(!0).addClass("bx-clone");u.settings.ariaHidden&&(t.attr("aria-hidden",!0),n.attr("aria-hidden",!0)),d.append(t).prepend(n)}u.loader.remove(),y(),"vertical"===u.settings.mode&&(u.settings.adaptiveHeight=!0),u.viewport.height(p()),d.redrawSlider(),u.settings.onSliderLoad.call(d,u.active.index),u.initialized=!0,u.settings.responsive&&$(window).bind("resize",z),u.settings.auto&&u.settings.autoStart&&(1<v()||u.settings.autoSlideForOnePage)&&H(),u.settings.ticker&&P(),u.settings.pager&&D(u.settings.startSlide),u.settings.controls&&j(),u.settings.touchEnabled&&!u.settings.ticker&&F(),u.settings.keyboardEnabled&&!u.settings.ticker&&$(document).keydown(I)},p=function(){var t=0,e=$();if("vertical"===u.settings.mode||u.settings.adaptiveHeight)if(u.carousel){var n=1===u.settings.moveSlides?u.active.index:u.active.index*m();for(e=u.children.eq(n),i=1;i<=u.settings.maxSlides-1;i++)e=n+i>=u.children.length?e.add(u.children.eq(i-1)):e.add(u.children.eq(n+i))}else e=u.children.eq(u.active.index);else e=u.children;return"vertical"===u.settings.mode?(e.each(function(e){t+=$(this).outerHeight()}),0<u.settings.slideMargin&&(t+=u.settings.slideMargin*(u.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return $(this).outerHeight(!1)}).get()),"border-box"===u.viewport.css("box-sizing")?t+=parseFloat(u.viewport.css("padding-top"))+parseFloat(u.viewport.css("padding-bottom"))+parseFloat(u.viewport.css("border-top-width"))+parseFloat(u.viewport.css("border-bottom-width")):"padding-box"===u.viewport.css("box-sizing")&&(t+=parseFloat(u.viewport.css("padding-top"))+parseFloat(u.viewport.css("padding-bottom"))),t},h=function(){var e="100%";return 0<u.settings.slideWidth&&(e="horizontal"===u.settings.mode?u.settings.maxSlides*u.settings.slideWidth+(u.settings.maxSlides-1)*u.settings.slideMargin:u.settings.slideWidth),e},g=function(){var e=u.settings.slideWidth,t=u.viewport.width();if(0===u.settings.slideWidth||u.settings.slideWidth>t&&!u.carousel||"vertical"===u.settings.mode)e=t;else if(1<u.settings.maxSlides&&"horizontal"===u.settings.mode){if(t>u.maxThreshold)return e;t<u.minThreshold?e=(t-u.settings.slideMargin*(u.settings.minSlides-1))/u.settings.minSlides:u.settings.shrinkItems&&(e=Math.floor((t+u.settings.slideMargin)/Math.ceil((t+u.settings.slideMargin)/(e+u.settings.slideMargin))-u.settings.slideMargin))}return e},v=function(){var e=0,t=0,n=0;if(0<u.settings.moveSlides)if(u.settings.infiniteLoop)e=Math.ceil(u.children.length/m());else for(;t<u.children.length;)++e,t=n+s(),n+=u.settings.moveSlides<=s()?u.settings.moveSlides:s();else e=Math.ceil(u.children.length/s());return e},m=function(){return 0<u.settings.moveSlides&&u.settings.moveSlides<=s()?u.settings.moveSlides:s()},y=function(){var e,t,n;u.children.length>u.settings.maxSlides&&u.active.last&&!u.settings.infiniteLoop?"horizontal"===u.settings.mode?(e=(t=u.children.last()).position(),x(-(e.left-(u.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===u.settings.mode&&(n=u.children.length-u.settings.minSlides,e=u.children.eq(n).position(),x(-e.top,"reset",0)):(e=u.children.eq(u.active.index*m()).position(),u.active.index===v()-1&&(u.active.last=!0),void 0!==e&&("horizontal"===u.settings.mode?x(-e.left,"reset",0):"vertical"===u.settings.mode&&x(-e.top,"reset",0)))},x=function(e,t,n,i){var r,o;u.usingCSS?(o="vertical"===u.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",d.css("-"+u.cssPrefix+"-transition-duration",n/1e3+"s"),"slide"===t?(d.css(u.animProp,o),0!==n?d.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){$(e.target).is(d)&&(d.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),L())}):L()):"reset"===t?d.css(u.animProp,o):"ticker"===t&&(d.css("-"+u.cssPrefix+"-transition-timing-function","linear"),d.css(u.animProp,o),0!==n?d.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){$(e.target).is(d)&&(d.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),x(i.resetValue,"reset",0),M())}):(x(i.resetValue,"reset",0),M()))):((r={})[u.animProp]=e,"slide"===t?d.animate(r,n,u.settings.easing,function(){L()}):"reset"===t?d.css(u.animProp,e):"ticker"===t&&d.animate(r,n,"linear",function(){x(i.resetValue,"reset",0),M()}))},b=function(){u.settings.pagerCustom?u.pagerEl=$(u.settings.pagerCustom):(u.pagerEl=$('<div class="bx-pager" />'),u.settings.pagerSelector?$(u.settings.pagerSelector).html(u.pagerEl):u.controls.el.addClass("bx-has-pager").append(u.pagerEl),e()),u.pagerEl.on("click touchend","a",N)},w=function(){u.controls.next=$('<a class="bx-next" href="">'+u.settings.nextText+"</a>"),u.controls.prev=$('<a class="bx-prev" href="">'+u.settings.prevText+"</a>"),u.controls.next.bind("click touchend",T),u.controls.prev.bind("click touchend",E),u.settings.nextSelector&&$(u.settings.nextSelector).append(u.controls.next),u.settings.prevSelector&&$(u.settings.prevSelector).append(u.controls.prev),u.settings.nextSelector||u.settings.prevSelector||(u.controls.directionEl=$('<div class="bx-controls-direction" />'),u.controls.directionEl.append(u.controls.prev).append(u.controls.next),u.controls.el.addClass("bx-has-controls-direction").append(u.controls.directionEl))},S=function(){u.controls.start=$('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+u.settings.startText+"</a></div>"),u.controls.stop=$('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+u.settings.stopText+"</a></div>"),u.controls.autoEl=$('<div class="bx-controls-auto" />'),u.controls.autoEl.on("click",".bx-start",k),u.controls.autoEl.on("click",".bx-stop",A),u.settings.autoControlsCombine?u.controls.autoEl.append(u.controls.start):u.controls.autoEl.append(u.controls.start).append(u.controls.stop),u.settings.autoControlsSelector?$(u.settings.autoControlsSelector).html(u.controls.autoEl):u.controls.el.addClass("bx-has-controls-auto").append(u.controls.autoEl),q(u.settings.autoStart?"stop":"start")},C=function(){u.children.each(function(e){var t=$(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&$(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},T=function(e){e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&d.stopAuto(),d.goToNextSlide())},E=function(e){e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&d.stopAuto(),d.goToPrevSlide())},k=function(e){d.startAuto(),e.preventDefault()},A=function(e){d.stopAuto(),e.preventDefault()},N=function(e){var t,n;e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&d.stopAuto(),void 0!==(t=$(e.currentTarget)).attr("data-slide-index")&&(n=parseInt(t.attr("data-slide-index")))!==u.active.index&&d.goToSlide(n))},D=function(n){var e=u.children.length;if("short"===u.settings.pagerType)return 1<u.settings.maxSlides&&(e=Math.ceil(u.children.length/u.settings.maxSlides)),void u.pagerEl.html(n+1+u.settings.pagerShortSeparator+e);u.pagerEl.find("a").removeClass("active"),u.pagerEl.each(function(e,t){$(t).find("a").eq(n).addClass("active")})},L=function(){if(u.settings.infiniteLoop){var e="";0===u.active.index?e=u.children.eq(0).position():u.active.index===v()-1&&u.carousel?e=u.children.eq((v()-1)*m()).position():u.active.index===u.children.length-1&&(e=u.children.eq(u.children.length-1).position()),e&&("horizontal"===u.settings.mode?x(-e.left,"reset",0):"vertical"===u.settings.mode&&x(-e.top,"reset",0))}u.working=!1,u.settings.onSlideAfter.call(d,u.children.eq(u.active.index),u.oldIndex,u.active.index)},q=function(e){u.settings.autoControlsCombine?u.controls.autoEl.html(u.controls[e]):(u.controls.autoEl.find("a").removeClass("active"),u.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},j=function(){1===v()?(u.controls.prev.addClass("disabled"),u.controls.next.addClass("disabled")):!u.settings.infiniteLoop&&u.settings.hideControlOnEnd&&(0===u.active.index?(u.controls.prev.addClass("disabled"),u.controls.next.removeClass("disabled")):u.active.index===v()-1?(u.controls.next.addClass("disabled"),u.controls.prev.removeClass("disabled")):(u.controls.prev.removeClass("disabled"),u.controls.next.removeClass("disabled")))},H=function(){if(0<u.settings.autoDelay)setTimeout(d.startAuto,u.settings.autoDelay);else d.startAuto(),$(window).focus(function(){d.startAuto()}).blur(function(){d.stopAuto()});u.settings.autoHover&&d.hover(function(){u.interval&&(d.stopAuto(!0),u.autoPaused=!0)},function(){u.autoPaused&&(d.startAuto(!0),u.autoPaused=null)})},P=function(){var e,t,n,i,r,o,s,a,l=0;"next"===u.settings.autoDirection?d.append(u.children.clone().addClass("bx-clone")):(d.prepend(u.children.clone().addClass("bx-clone")),e=u.children.first().position(),l="horizontal"===u.settings.mode?-e.left:-e.top),x(l,"reset",0),u.settings.pager=!1,u.settings.controls=!1,u.settings.autoControls=!1,u.settings.tickerHover&&(u.usingCSS?(i="horizontal"===u.settings.mode?4:5,u.viewport.hover(function(){t=d.css("-"+u.cssPrefix+"-transform"),n=parseFloat(t.split(",")[i]),x(n,"reset",0)},function(){a=0,u.children.each(function(e){a+="horizontal"===u.settings.mode?$(this).outerWidth(!0):$(this).outerHeight(!0)}),r=u.settings.speed/a,o="horizontal"===u.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(n))),M(s)})):u.viewport.hover(function(){d.stop()},function(){a=0,u.children.each(function(e){a+="horizontal"===u.settings.mode?$(this).outerWidth(!0):$(this).outerHeight(!0)}),r=u.settings.speed/a,o="horizontal"===u.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(d.css(o)))),M(s)})),M()},M=function(e){var t,n,i=e||u.settings.speed,r={left:0,top:0},o={left:0,top:0};"next"===u.settings.autoDirection?r=d.find(".bx-clone").first().position():o=u.children.first().position(),t="horizontal"===u.settings.mode?-r.left:-r.top,n="horizontal"===u.settings.mode?-o.left:-o.top,x(t,"ticker",i,{resetValue:n})},I=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&function(e){var t=$(window),n={top:t.scrollTop(),left:t.scrollLeft()},i=e.offset();return n.right=n.left+t.width(),n.bottom=n.top+t.height(),i.right=i.left+e.outerWidth(),i.bottom=i.top+e.outerHeight(),!(n.right<i.left||n.left>i.right||n.bottom<i.top||n.top>i.bottom)}(d)){if(39===e.keyCode)return T(e),!1;if(37===e.keyCode)return E(e),!1}},F=function(){u.touch={start:{x:0,y:0},end:{x:0,y:0}},u.viewport.bind("touchstart MSPointerDown pointerdown",O),u.viewport.on("click",".bxslider a",function(e){u.viewport.hasClass("click-disabled")&&(e.preventDefault(),u.viewport.removeClass("click-disabled"))})},O=function(e){if(u.controls.el.addClass("disabled"),u.working)e.preventDefault(),u.controls.el.removeClass("disabled");else{u.touch.originalPos=d.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];u.touch.start.x=n[0].pageX,u.touch.start.y=n[0].pageY,u.viewport.get(0).setPointerCapture&&(u.pointerId=t.pointerId,u.viewport.get(0).setPointerCapture(u.pointerId)),u.viewport.bind("touchmove MSPointerMove pointermove",B),u.viewport.bind("touchend MSPointerUp pointerup",W),u.viewport.bind("MSPointerCancel pointercancel",R)}},R=function(e){x(u.touch.originalPos.left,"reset",0),u.controls.el.removeClass("disabled"),u.viewport.unbind("MSPointerCancel pointercancel",R),u.viewport.unbind("touchmove MSPointerMove pointermove",B),u.viewport.unbind("touchend MSPointerUp pointerup",W),u.viewport.get(0).releasePointerCapture&&u.viewport.get(0).releasePointerCapture(u.pointerId)},B=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-u.touch.start.x),r=Math.abs(n[0].pageY-u.touch.start.y),o=0,s=0;r<3*i&&u.settings.preventDefaultSwipeX?e.preventDefault():i<3*r&&u.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==u.settings.mode&&u.settings.oneToOneTouch&&(o="horizontal"===u.settings.mode?(s=n[0].pageX-u.touch.start.x,u.touch.originalPos.left+s):(s=n[0].pageY-u.touch.start.y,u.touch.originalPos.top+s),x(o,"reset",0))},W=function(e){u.viewport.unbind("touchmove MSPointerMove pointermove",B),u.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,r=0;u.touch.end.x=n[0].pageX,u.touch.end.y=n[0].pageY,"fade"===u.settings.mode?(r=Math.abs(u.touch.start.x-u.touch.end.x))>=u.settings.swipeThreshold&&(u.touch.start.x>u.touch.end.x?d.goToNextSlide():d.goToPrevSlide(),d.stopAuto()):(i="horizontal"===u.settings.mode?(r=u.touch.end.x-u.touch.start.x,u.touch.originalPos.left):(r=u.touch.end.y-u.touch.start.y,u.touch.originalPos.top),!u.settings.infiniteLoop&&(0===u.active.index&&0<r||u.active.last&&r<0)?x(i,"reset",200):Math.abs(r)>=u.settings.swipeThreshold?(r<0?d.goToNextSlide():d.goToPrevSlide(),d.stopAuto()):x(i,"reset",200)),u.viewport.unbind("touchend MSPointerUp pointerup",W),u.viewport.get(0).releasePointerCapture&&u.viewport.get(0).releasePointerCapture(u.pointerId)},z=function(e){if(u.initialized)if(u.working)window.setTimeout(z,10);else{var t=$(window).width(),n=$(window).height();r===t&&o===n||(r=t,o=n,d.redrawSlider(),u.settings.onSliderResize.call(d,u.active.index))}};return d.goToSlide=function(e,t){var n,i,r,o,s=!0,a=0,l={left:0,top:0},c=null;if(u.oldIndex=u.active.index,u.active.index=function(e){return e<0?u.settings.infiniteLoop?v()-1:u.active.index:e>=v()?u.settings.infiniteLoop?0:u.active.index:e}(e),!u.working&&u.active.index!==u.oldIndex){if(u.working=!0,void 0!==(s=u.settings.onSlideBefore.call(d,u.children.eq(u.active.index),u.oldIndex,u.active.index))&&!s)return u.active.index=u.oldIndex,void(u.working=!1);"next"===t?u.settings.onSlideNext.call(d,u.children.eq(u.active.index),u.oldIndex,u.active.index)||(s=!1):"prev"===t&&(u.settings.onSlidePrev.call(d,u.children.eq(u.active.index),u.oldIndex,u.active.index)||(s=!1)),u.active.last=u.active.index>=v()-1,(u.settings.pager||u.settings.pagerCustom)&&D(u.active.index),u.settings.controls&&j(),"fade"===u.settings.mode?(u.settings.adaptiveHeight&&u.viewport.height()!==p()&&u.viewport.animate({height:p()},u.settings.adaptiveHeightSpeed),u.children.filter(":visible").fadeOut(u.settings.speed).css({zIndex:0}),u.children.eq(u.active.index).css("zIndex",u.settings.slideZIndex+1).fadeIn(u.settings.speed,function(){$(this).css("zIndex",u.settings.slideZIndex),L()})):(u.settings.adaptiveHeight&&u.viewport.height()!==p()&&u.viewport.animate({height:p()},u.settings.adaptiveHeightSpeed),!u.settings.infiniteLoop&&u.carousel&&u.active.last?"horizontal"===u.settings.mode?(l=(c=u.children.eq(u.children.length-1)).position(),a=u.viewport.width()-c.outerWidth()):(n=u.children.length-u.settings.minSlides,l=u.children.eq(n).position()):u.carousel&&u.active.last&&"prev"===t?(i=1===u.settings.moveSlides?u.settings.maxSlides-m():(v()-1)*m()-(u.children.length-u.settings.maxSlides),l=(c=d.children(".bx-clone").eq(i)).position()):"next"===t&&0===u.active.index?(l=d.find("> .bx-clone").eq(u.settings.maxSlides).position(),u.active.last=!1):0<=e&&(o=e*parseInt(m()),l=u.children.eq(o).position()),void 0!==l?(r="horizontal"===u.settings.mode?-(l.left-a):-l.top,x(r,"slide",u.settings.speed)):u.working=!1),u.settings.ariaHidden&&f(u.active.index*m())}},d.goToNextSlide=function(){if(u.settings.infiniteLoop||!u.active.last){var e=parseInt(u.active.index)+1;d.goToSlide(e,"next")}},d.goToPrevSlide=function(){if(u.settings.infiniteLoop||0!==u.active.index){var e=parseInt(u.active.index)-1;d.goToSlide(e,"prev")}},d.startAuto=function(e){u.interval||(u.interval=setInterval(function(){"next"===u.settings.autoDirection?d.goToNextSlide():d.goToPrevSlide()},u.settings.pause),u.settings.autoControls&&!0!==e&&q("stop"))},d.stopAuto=function(e){u.interval&&(clearInterval(u.interval),u.interval=null,u.settings.autoControls&&!0!==e&&q("start"))},d.getCurrentSlide=function(){return u.active.index},d.getCurrentSlideElement=function(){return u.children.eq(u.active.index)},d.getSlideElement=function(e){return u.children.eq(e)},d.getSlideCount=function(){return u.children.length},d.isWorking=function(){return u.working},d.redrawSlider=function(){u.children.add(d.find(".bx-clone")).outerWidth(g()),u.viewport.css("height",p()),u.settings.ticker||y(),u.active.last&&(u.active.index=v()-1),u.active.index>=v()&&(u.active.last=!0),u.settings.pager&&!u.settings.pagerCustom&&(e(),D(u.active.index)),u.settings.ariaHidden&&f(u.active.index*m())},d.destroySlider=function(){u.initialized&&(u.initialized=!1,$(".bx-clone",this).remove(),u.children.each(function(){void 0!==$(this).data("origStyle")?$(this).attr("style",$(this).data("origStyle")):$(this).removeAttr("style")}),void 0!==$(this).data("origStyle")?this.attr("style",$(this).data("origStyle")):$(this).removeAttr("style"),$(this).unwrap().unwrap(),u.controls.el&&u.controls.el.remove(),u.controls.next&&u.controls.next.remove(),u.controls.prev&&u.controls.prev.remove(),u.pagerEl&&u.settings.controls&&!u.settings.pagerCustom&&u.pagerEl.remove(),$(".bx-caption",this).remove(),u.controls.autoEl&&u.controls.autoEl.remove(),clearInterval(u.interval),u.settings.responsive&&$(window).unbind("resize",z),u.settings.keyboardEnabled&&$(document).unbind("keydown",I),$(this).removeData("bxSlider"))},d.reloadSlider=function(e){void 0!==e&&(t=e),d.destroySlider(),n(),$(d).data("bxSlider",this)},n(),$(d).data("bxSlider",this),this}}}(jQuery),document.addEventListener("DOMContentLoaded",function(){"use strict";function e(){for(var e=document.querySelectorAll("section"),a=void 0,l=void 0,c=void 0,u=void 0,d=void 0,f=void 0,t=0;t<e.length;t++)a=e[1],l=e[2],c=e[4],u=e[6],d=e[7],f=e[8];for(var n=document.getElementsByTagName("header"),p=void 0,i=0;i<n.length;i++)p=n[i];function r(){if(document.documentElement.clientWidth<=1279){p.style.backgroundColor="rgba(0,0,0,.5)",document.getElementById("header_menu").style.paddingTop="12px";for(var e=document.getElementsByClassName("logo"),t=0;t<e.length;t++)e[t].style.paddingTop="33px";s()}else{if(l.getBoundingClientRect().top<=p.clientHeight/1.3){p.style.backgroundColor="rgba(0,0,0,.5)",document.getElementById("header_menu").style.paddingTop="33px";for(var n=document.getElementsByClassName("logo"),i=0;i<n.length;i++)n[i].style.paddingTop="33px"}if(l.getBoundingClientRect().top>p.clientHeight/1.3){p.style.backgroundColor="rgba(0,0,0,.0)",document.getElementById("header_menu").style.paddingTop="58px";for(var r=document.getElementsByClassName("logo"),o=0;o<r.length;o++)r[o].style.paddingTop="58px"}s()}function s(){a.getBoundingClientRect().top<=0&&a.getBoundingClientRect().bottom>=p.clientHeight&&(g(),h(0)),l.getBoundingClientRect().top<=p.clientHeight/1.3&&c.getBoundingClientRect().top>p.clientHeight/1.3&&(g(),h(1)),c.getBoundingClientRect().top<=p.clientHeight/1.3&&u.getBoundingClientRect().top>p.clientHeight/1.3&&(g(),h(2)),u.getBoundingClientRect().top<=p.clientHeight/1.3&&d.getBoundingClientRect().top>=p.clientHeight/1.3&&(g(),h(3)),d.getBoundingClientRect().top<=p.clientHeight/1.3&&f.getBoundingClientRect().top>=p.clientHeight/1.3&&(g(),h(4)),f.getBoundingClientRect().top<=p.clientHeight/1.3&&(g(),h(5))}}function h(e){for(var t=document.querySelectorAll("nav ul li"),n=0;n<t.length;n++)t[e].classList.add("hover")}function g(){for(var e=document.querySelectorAll("nav ul li"),t=0;t<e.length;t++)e[t].classList.remove("hover")}(window.onscroll=r)()}var t,n;!function(){for(var n=document.querySelectorAll("#work .label ul li"),t=void 0,e=void 0,i=void 0,r=void 0,o=0;o<n.length;o++)t=n[0],e=n[1],i=n[2],r=n[3];var s=document.getElementById("work"),a=s.getElementsByClassName("web"),l=s.getElementsByClassName("mob"),c=s.getElementsByClassName("photo");t.addEventListener("click",function(e){d(),this.classList.add("active");for(var t=0;t<u.length;t++)u[t].classList.add("show")}),e.addEventListener("click",function(e){d(),this.classList.add("active");for(var t=0;t<a.length;t++)a[t].classList.add("show")}),i.addEventListener("click",function(e){d(),this.classList.add("active");for(var t=0;t<l.length;t++)l[t].classList.add("show")}),r.addEventListener("click",function(e){d(),this.classList.add("active");for(var t=0;t<c.length;t++)c[t].classList.add("show")});var u=s.getElementsByClassName("item");function d(){for(var e=0;e<u.length;e++)u[e].classList.remove("show");for(var t=0;t<n.length;t++)n[t].classList.remove("active")}!function(){t.classList.add("active");for(var e=0;e<u.length;e++)u[e].classList.add("show")}()}(),function(){for(var e=document.querySelectorAll('[href^="#"]'),t=0;t<e.length;t++)e[t].addEventListener("click",function(e){e.preventDefault();var r=window.pageYOffset,o=this.href.replace(/[^#]*(.*)/,"$1"),s=document.querySelector(o).getBoundingClientRect().top,a=null;requestAnimationFrame(function e(t){null===a&&(a=t);var n=t-a,i=s<0?Math.max(r-n/.55,r+s):Math.min(r+n/.55,r+s);window.scrollTo(0,i);i!=r+s?requestAnimationFrame(e):location.hash=o})},!1)}(),window.addEventListener("resize",e),e(),function(){var e=document.getElementById("header_menu"),t=document.getElementById("click_show_menu"),i=t.getElementsByTagName("SPAN"),n=e.getElementsByClassName("single");t.addEventListener("click",o,!1);for(var r=0;r<n.length;r++)n[r].addEventListener("click",o,!1);function o(){for(var e=document.getElementsByClassName("menu"),t=0;t<i.length;t++){i[t].classList.toggle("active");break}for(var n=0;n<e.length;n++){e[n].classList.toggle("active");break}}}(),t=new Date,n=t.getUTCFullYear(),document.getElementById("copyright").innerHTML="Â© "+n,console.log(t)}),$(function(){$(".slider").bxSlider({controls:!1,pager:!0,pagerSelector:"links",pagerCustom:".links",adaptiveHeight:!0,captions:!1}),$(".slider_clients").bxSlider({controls:!1,pager:!0,pagerSelector:"links_clients",pagerCustom:".links_clients",adaptiveHeight:!0,captions:!1}),$(".slider_testimonials").bxSlider({controls:!1,pager:!0,pagerSelector:"links_testimonials",pagerCustom:".links_testimonials",adaptiveHeight:!0,captions:!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
